var documenterSearchIndex = {"docs":
[{"location":"#Musical-STFT-Tensor-Decomposition","page":"Musical STFT Tensor Decomposition","title":"Musical STFT Tensor Decomposition","text":"","category":"section"},{"location":"","page":"Musical STFT Tensor Decomposition","title":"Musical STFT Tensor Decomposition","text":"greet","category":"page"},{"location":"#TensorDecompSTFT.greet","page":"Musical STFT Tensor Decomposition","title":"TensorDecompSTFT.greet","text":"greet(::Any)\n\nPrints \"Hello World!\"\n\n\n\n\n\n","category":"function"},{"location":"","page":"Musical STFT Tensor Decomposition","title":"Musical STFT Tensor Decomposition","text":"Testing out some math as well","category":"page"},{"location":"","page":"Musical STFT Tensor Decomposition","title":"Musical STFT Tensor Decomposition","text":"beginaligned\nP(a + bϵ) = p_0 + p_1 (a + bϵ) + cdots + p_n (a + bϵ)^n \n          = p_0 + p_1 a + p_2 a^2 + dots \n          + p_1bϵ + 2p_2 abϵ + 3p_3 a^2 b ϵ + cdots \n          = P(a) + bP^prime(a)ϵ\nendaligned","category":"page"},{"location":"","page":"Musical STFT Tensor Decomposition","title":"Musical STFT Tensor Decomposition","text":"mySTFT","category":"page"},{"location":"#TensorDecompSTFT.mySTFT","page":"Musical STFT Tensor Decomposition","title":"TensorDecompSTFT.mySTFT","text":"mySTFT(x::Vector{Complex}, t::Vector{Real}, width::Real)\n\nTakes x(t) and returns the STFT of x, X, and the frequencies k. A Gaussian window is used with the width needed as an input.\n\nExample:\n\nt = Vector(range(0, 1, 1000)) # Time points\nx = sin.(2π*200t.^2) # Generate chirp signal\nwidth = 0.01 #window size\nX, k = mySTFT(x, t, width)\ns = abs2.(X) # get magnitude\nheatmap(t, k, s) # plot\n\n\n\n\n\n","category":"function"}]
}
